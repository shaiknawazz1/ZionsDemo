# Code converted on 2023-04-27 14:42:56
import os
from pyspark.sql import *
from pyspark.sql.types import *
from pyspark.sql.functions import *
from pyspark import SparkContext
from pyspark.sql.session import SparkSession

sc = SparkContext('local')
spark = SparkSession(sc)


def convert_encoding(input_str, from_encoding="ISO-8859-1", to_encoding="UTF-8"):
    return input_str.encode(from_encoding).decode(to_encoding)


udf_convert_encoding = udf(convert_encoding, StringType())


def days_in_year(date_str):
    year = int(date_str[:4])
    if calendar.isleap(year):
        return 366
    else:
        return 365


udf_days_in_year = udf(days_in_year, IntegerType())


# Variable_declaration_comment
os.environ['ps_BANCS_BRL'] = ''
ps_BANCS_BRL = os.getenv('ps_BANCS_BRL')


# Processing node aud_in_CONV2, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ACCT_ADDRESS_LINK_aud, link aud_in_CONV2

aud_in_CONV2 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".acct_address_link
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV2 = spark.sql(aud_in_CONV2)

# Processing node aud_in_CONV9, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_BUDGET_LINE_ITEM_MASTER_aud, link aud_in_CONV9

aud_in_CONV9 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".BUDGET_LINE_ITEM_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV9 = spark.sql(aud_in_CONV9)

# Processing node DATA_IN_CONV8, type SOURCE
# COLUMN COUNT: 5
# Original node name Ora_ARRANGEMENT_PROD_LINK, link DATA_IN_CONV8

DATA_IN_CONV8 = """SELECT
INST_NBR,
ARRANGEMENT_NBR,
ARRANGEMENT_PROD_CODE,
SWING_LIMIT,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_PROD_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV8 = spark.sql(DATA_IN_CONV8)

# Processing node aud_in_CONV5, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_MEMBER_MIRROR_aud, link aud_in_CONV5

aud_in_CONV5 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_MIRROR
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV5 = spark.sql(aud_in_CONV5)

# Processing node aud_in_CONV4, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_LINK_ENQUIRY_aud, link aud_in_CONV4

aud_in_CONV4 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_LINK_ENQUIRY
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV4 = spark.sql(aud_in_CONV4)

# Processing node DATA_IN_CONV10, type SOURCE
# COLUMN COUNT: 21
# Original node name Ora_BUDGET_LINE_ITEM_MASTER, link DATA_IN_CONV10

DATA_IN_CONV10 = """SELECT
INST_NBR,
ACCT_NBR,
BUDGET_NBR,
LINE_ITEM_NBR,
LINE_ITEM_SEQ_NBR,
MASTER_ACCT_NBR,
LINE_ITEM_DESC,
LINE_ITEM_CATEGORY,
LINE_ITEM_SUB_CATEGORY,
BUDGET_AMOUNT,
REVISED_BUDGET_AMOUNT,
UTILIZED_AMOUNT,
PENDING_DRAW_AMOUNT,
RETENTION_AMOUNT,
INSPECTION_FLAG,
INSPECTION_PERC_COMPLETE,
INSPECTION_AMOUNT_COMPLETE,
RETENTION_FLAG,
HOLD_FLAG,
BUDGET_LINE_STATUS,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".BUDGET_LINE_ITEM_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV10 = spark.sql(DATA_IN_CONV10)

# Processing node aud_in_CONV7, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_MEMBER_PROD_LINK_aud, link aud_in_CONV7

aud_in_CONV7 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_PROD_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV7 = spark.sql(aud_in_CONV7)

# Processing node aud_in_CONV11, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_BUDGET_SUMMARY_MASTER_aud, link aud_in_CONV11

aud_in_CONV11 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".BUDGET_SUMMARY_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV11 = spark.sql(aud_in_CONV11)

# Processing node DATA_IN_CONV4, type SOURCE
# COLUMN COUNT: 6
# Original node name Ora_ARRANGEMENT_LINK_ENQUIRY, link DATA_IN_CONV4

DATA_IN_CONV4 = """SELECT
INST_NBR,
FACILITY_NBR,
ARRANGEMENT_NBR,
STATUS,
ARRANGEMENT_INDICATOR,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_LINK_ENQUIRY
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV4 = spark.sql(DATA_IN_CONV4)

# Processing node DATA_IN_CONV3, type SOURCE
# COLUMN COUNT: 14
# Original node name Ora_ARRANGEMENT_ACCT_LINK, link DATA_IN_CONV3

DATA_IN_CONV3 = """SELECT
INST_NBR,
ACCT_NBR,
ARRANGEMENT_NBR,
ARRANGEMENT_PROD_CODE,
ARRANGEMENT_PROD_CODE_DESC,
AGENT_BANK_LOAN_ACCT_NBR,
LINK_STATUS,
LINK_STATUS_DESC,
PREMIUM_DISC_INDICATOR,
TOTAL_ADVANCE_AMOUNT,
TOTAL_BILL_AMOUNT,
SHARE_PERC,
LINK_DTLS_CATEGORY_AMOUNT,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".arrangement_acct_link
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV3 = spark.sql(DATA_IN_CONV3)

# Processing node aud_in_CONV6, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_MEMBER_LINK_aud, link aud_in_CONV6

aud_in_CONV6 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV6 = spark.sql(aud_in_CONV6)

# Processing node aud_out_CONV9, type REPLICATE
# COLUMN COUNT: 4
# Original node name cp_BUDGET_LINE_ITEM_MASTER, link aud_out_CONV9

aud_out_CONV9 = aud_in_CONV9.select(
    aud_in_CONV9.TOTAL,
    aud_in_CONV9.NULL,
    aud_in_CONV9.RECORD_COUNT,
    aud_in_CONV9.COUNT
)

# Processing node aud_in, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ACCT_FACILITY_REL_DTLS_aud, link aud_in

aud_in = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ACCT_FACILITY_REL_DTLS
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in = spark.sql(aud_in)

# Processing node aud_in_CONV8, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_PROD_LINK_aud, link aud_in_CONV8

aud_in_CONV8 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_PROD_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV8 = spark.sql(aud_in_CONV8)

# Processing node DATA_IN_CONV6, type SOURCE
# COLUMN COUNT: 35
# Original node name Ora_ARRANGEMENT_MEMBER_LINK, link DATA_IN_CONV6

DATA_IN_CONV6 = """SELECT
INST_NBR,
ARRANGEMENT_NBR,
COUNTER_PARTY_NBR,
EFF_DT,
LINK_STATUS,
GUARANTEE_LOAN,
MEMBER_BANK_ROLE,
AGENT_BANK_ARRANGEMENT_NBR,
AGENT_BANK_COUNTER_PARTY_NBR,
SHARE_AMOUNT,
SHARE_PERC,
SETT_LINK_ID,
USER_NBR_1,
ROLE_1,
USER_NBR_2,
ROLE_2,
USER_NBR_3,
ROLE_3,
USER_NBR_4,
ROLE_4,
USER_NBR_5,
ROLE_5,
USER_NBR_6,
ROLE_6,
SWING_APPLICABLE,
SWING_MANAGED_BY,
SWING_OWNER,
PREMIUM_DISC_INDICATOR,
NOTICE_DELI_MODE_1,
NOTICE_DELI_MODE_2,
NOTICE_DELI_MODE_3,
NOTICE_DELI_MODE_4,
NOTICE_DELI_MODE_5,
NOTICE_DELI_MODE_6,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV6 = spark.sql(DATA_IN_CONV6)

# Processing node aud_out_CONV5, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_MEMBER_MIRROR_aud, link aud_out_CONV5

aud_out_CONV5 = aud_in_CONV5.select(
    aud_in_CONV5.TOTAL,
    aud_in_CONV5.NULL,
    aud_in_CONV5.RECORD_COUNT,
    aud_in_CONV5.COUNT
)

# Processing node DATA_IN_CONV2, type SOURCE
# COLUMN COUNT: 14
# Original node name Ora_ACCT_ADDRESS_LINK, link DATA_IN_CONV2

DATA_IN_CONV2 = """SELECT
inst_nbr,
acct_nbr,
cust_nbr,
seq_nbr,
link_type,
brl_record_dt,
address_type,
communication_type,
communication_mode,
nbr_of_copies,
eff_dt,
expiry_dt,
--tcpa_opt_in,
--tcpa_opt_dt,
foreign_address_indicator,
bad_address_indicator
FROM
"+ps_BANCS_BRL+".acct_address_link
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV2 = spark.sql(DATA_IN_CONV2)

# Processing node aud_out_CONV11, type REPLICATE
# COLUMN COUNT: 4
# Original node name cp_BUDGET_SUMMARY_MASTER, link aud_out_CONV11

aud_out_CONV11 = aud_in_CONV11.select(
    aud_in_CONV11.TOTAL,
    aud_in_CONV11.NULL,
    aud_in_CONV11.RECORD_COUNT,
    aud_in_CONV11.COUNT
)

# Processing node DATA_IN, type SOURCE
# COLUMN COUNT: 9
# Original node name Ora_ACCT_FACILITY_REL_DTLS, link DATA_IN

DATA_IN = """SELECT
INST_NBR,
ACCT_NBR,
FACILITY_NBR,
FACILITY_LVL_NBR,
FACILITY_PARENT_REF,
FACILITY_BREAKDOWN,
FACILITY_REPAY_TYPE,
FACILITY_REPAY_PRIORITY,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ACCT_FACILITY_REL_DTLS
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN = spark.sql(DATA_IN)

# Processing node DATA_IN_CONV7, type SOURCE
# COLUMN COUNT: 11
# Original node name Ora_ARRANGEMENT_MEMBER_PROD_LINK, link DATA_IN_CONV7

DATA_IN_CONV7 = """SELECT
INST_NBR,
ARRANGEMENT_NBR,
MEMBER_NBR,
ARRANGEMENT_LIMIT_AMOUNT,
MEMBER_SHARE_AMOUNT,
MEMBER_SHARE_PERC,
SKIM_PERC,
ASR_PRIORITY,
STATUS,
ARRANGEMENT_PROD_CODE,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_PROD_LINK
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV7 = spark.sql(DATA_IN_CONV7)

# Processing node DATA_IN_CONV9, type SOURCE
# COLUMN COUNT: 45
# Original node name Ora_ARRANGEMENT_SETUP_MASTER, link DATA_IN_CONV9

DATA_IN_CONV9 = """SELECT
INST_NBR,
ARRANGEMENT_NBR,
CUST_NBR,
EFF_DT,
TOTAL_LIMIT_AMOUNT,
ARRANGEMENT_ROLE,
ARRANGEMENT_TYPE,
ARRANGEMENT_STATUS,
ARRANGEMENT_AUTH_STATUS,
ARRANGEMENT_UTILIZED_AMOUNT,
PARENT_ARRANGEMENT_NBR,
BRANCH_NBR,
RECOURSE_FLAG,
ASSET_SHARE,
AGREEMENT_START_DT,
AGREEMENT_EXPIRY_DT,
REF_BANK,
CUSIP_NBR,
SHARE_CREDIT_FLAG,
SHARE_CREDIT_ID,
SHARE_AMOUNT,
SHARE_PERC,
ARRANGEMENT_USER_NBR_1,
ARRANGEMENT_ROLE_1,
ARRANGEMENT_USER_NBR_2,
ARRANGEMENT_ROLE_2,
ARRANGEMENT_USER_NBR_3,
ARRANGEMENT_ROLE_3,
ARRANGEMENT_USER_NBR_4,
ARRANGEMENT_ROLE_4,
ARRANGEMENT_USER_NBR_5,
ARRANGEMENT_ROLE_5,
ARRANGEMENT_USER_NBR_6,
ARRANGEMENT_ROLE_6,
SWING_APPLICABLE,
SWING_MANAGED_BY,
SWING_OWNER,
GLOBAL_UTILIZED_LIMIT_BASIS,
USED_NOTE_VALUE,
ORIGINAL_LIMIT_AMOUNT,
SUB_LIMIT_AMOUNT,
ARRANGEMENT_DESC,
ULT_AGENT,
ARRANGEMENT_AGENT_BANK,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_SETUP_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV9 = spark.sql(DATA_IN_CONV9)

# Processing node aud_in_CONV10, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_SETUP_MASTER_aud, link aud_in_CONV10

aud_in_CONV10 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".ARRANGEMENT_SETUP_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV10 = spark.sql(aud_in_CONV10)

# Processing node aud_out_CONV7, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_MEMBER_PROD_LINK, link aud_out_CONV7

aud_out_CONV7 = aud_in_CONV7.select(
    aud_in_CONV7.TOTAL,
    aud_in_CONV7.NULL,
    aud_in_CONV7.RECORD_COUNT,
    aud_in_CONV7.COUNT
)

# Processing node LINK_OUT_CONV6, type TRANSFORMATION
# COLUMN COUNT: 11
# Original node name XFM_ARRANGEMENT_MEMBER_PROD_LINK, link LINK_OUT_CONV6

LINK_OUT_CONV6 = DATA_IN_CONV7.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.MEMBER_NBR.alias('MEMBER_NBR'),
    DATA_IN.ARRANGEMENT_LIMIT_AMOUNT.alias('ARRANGEMENT_LIMIT_AMOUNT'),
    DATA_IN.MEMBER_SHARE_AMOUNT.alias('MEMBER_SHARE_AMOUNT'),
    DATA_IN.MEMBER_SHARE_PERC.alias('MEMBER_SHARE_PERC'),
    DATA_IN.SKIM_PERC.alias('SKIM_PERC'),
    DATA_IN.ASR_PRIORITY.alias('ASR_PRIORITY'),
    DATA_IN.STATUS.alias('STATUS'),
    DATA_IN.ARRANGEMENT_PROD_CODE.alias('ARRANGEMENT_PROD_CODE'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node aud_out_CONV2, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ACCT_ADDRESS_LINK_aud, link aud_out_CONV2

aud_out_CONV2 = aud_in_CONV2.select(
    aud_in_CONV2.TOTAL,
    aud_in_CONV2.NULL,
    aud_in_CONV2.RECORD_COUNT,
    aud_in_CONV2.COUNT
)

# Processing node aud_in_CONV3, type SOURCE
# COLUMN COUNT: 4
# Original node name Ora_ARRANGEMENT_ACCT_LINK_aud, link aud_in_CONV3

aud_in_CONV3 = """SELECT 'Total' as Total, CAST(NULL as varchar(10)) ,'RECORD_COUNT' as RECORD_COUNT ,CAST(count(*) as INTEGER)  COUNT1 FROM
"+ps_BANCS_BRL+".arrangement_acct_link
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

aud_in_CONV3 = spark.sql(aud_in_CONV3)

# Processing node BUDGET_SUMMARY_MASTER_aud, type TARGET
# COLUMN COUNT: 4

BUDGET_SUMMARY_MASTER_aud = aud_out_CONV11.select('*')
BUDGET_SUMMARY_MASTER_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_budget_summary_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node BUDGET_LINE_ITEM_MASTER_aud, type TARGET
# COLUMN COUNT: 4

BUDGET_LINE_ITEM_MASTER_aud = aud_out_CONV9.select('*')
BUDGET_LINE_ITEM_MASTER_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_budget_line_item_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node LINK_OUT_CONV2, type TRANSFORMATION
# COLUMN COUNT: 14
# Original node name XFM_ARRNG_ACCT_LINK, link LINK_OUT_CONV2

LINK_OUT_CONV2 = DATA_IN_CONV3.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ACCT_NBR.alias('ACCT_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.ARRANGEMENT_PROD_CODE.alias('ARRANGEMENT_PROD_CODE'),
    DATA_IN.ARRANGEMENT_PROD_CODE_DESC.alias('ARRANGEMENT_PROD_CODE_DESC'),
    DATA_IN.AGENT_BANK_LOAN_ACCT_NBR.alias('AGENT_BANK_LOAN_ACCT_NBR'),
    DATA_IN.LINK_STATUS.alias('LINK_STATUS'),
    DATA_IN.LINK_STATUS_DESC.alias('LINK_STATUS_DESC'),
    DATA_IN.PREMIUM_DISC_INDICATOR.alias('PREMIUM_DISC_INDICATOR'),
    DATA_IN.TOTAL_ADVANCE_AMOUNT.alias('TOTAL_ADVANCE_AMOUNT'),
    DATA_IN.TOTAL_BILL_AMOUNT.alias('TOTAL_BILL_AMOUNT'),
    DATA_IN.SHARE_PERC.alias('SHARE_PERC'),
    DATA_IN.LINK_DTLS_CATEGORY_AMOUNT.alias('LINK_DTLS_CATEGORY_AMOUNT'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node DATA_IN_CONV11, type SOURCE
# COLUMN COUNT: 28
# Original node name Ora_BUDGET_SUMMARY_MASTER, link DATA_IN_CONV11

DATA_IN_CONV11 = """SELECT
INST_NBR   
, ACCT_NBR   
, BUDGET_NBR   
, MASTER_ACCT_NBR  
, BUDGET_STATUS  
, LOAN_FUND_AMOUNT  
, LOAN_FUND_UTILIZED_AMOUNT  
, LOAN_FUND_PENDING_DRAW_AMOUNT  
, LOAN_FUND_RETENTION_AMOUNT  
, LOAN_FUND_EXCESS_AMOUNT  
, OTHER_SOURCE_AMOUNT  
, OTHER_SOURCE_UTILIZED_AMOUNT  
, OTHER_SOURCE_PENDING_AMOUNT  
, HOLD_AMOUNT  
, INSPECTION_METHOD  
, INSPECTION_BASIS  
, INSPECTION_PERC_COMPLETE  
, INSPECTION_AMOUNT_COMPLETE  
, LAST_INSPECTION_DT
, PRIMARY_VENDOR_ID  
, PRIMARY_VENDOR_NAME  
, PROJECT_END_DT 
, FIRST_ACTIVE_DT 
, PRIMARY_SUB_VENDOR_ID  
, ORIGINAL_LOAN_FUND_AMOUNT  
, ORIGINAL_OTHER_SOURCE_AMOUNT  
, ORIGINAL_EXCEED_FUND_AMOUNT  
, BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".BUDGET_SUMMARY_MASTER
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV11 = spark.sql(DATA_IN_CONV11)

# Processing node LINK_OUT_CONV5, type TRANSFORMATION
# COLUMN COUNT: 35
# Original node name XFM_ARRANGEMENT_MEMBER_LINK, link LINK_OUT_CONV5

LINK_OUT_CONV5 = DATA_IN_CONV6.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.COUNTER_PARTY_NBR.alias('COUNTER_PARTY_NBR'),
    DATA_IN.EFF_DT.alias('EFF_DT'),
    DATA_IN.LINK_STATUS.alias('LINK_STATUS'),
    DATA_IN.GUARANTEE_LOAN.alias('GUARANTEE_LOAN'),
    DATA_IN.MEMBER_BANK_ROLE.alias('MEMBER_BANK_ROLE'),
    DATA_IN.AGENT_BANK_ARRANGEMENT_NBR.alias('AGENT_BANK_ARRANGEMENT_NBR'),
    DATA_IN.AGENT_BANK_COUNTER_PARTY_NBR.alias('AGENT_BANK_COUNTER_PARTY_NBR'),
    DATA_IN.SHARE_AMOUNT.alias('SHARE_AMOUNT'),
    DATA_IN.SHARE_PERC.alias('SHARE_PERC'),
    DATA_IN.SETT_LINK_ID.alias('SETT_LINK_ID'),
    DATA_IN.USER_NBR_1.alias('USER_NBR_1'),
    DATA_IN.ROLE_1.alias('ROLE_1'),
    DATA_IN.USER_NBR_2.alias('USER_NBR_2'),
    DATA_IN.ROLE_2.alias('ROLE_2'),
    DATA_IN.USER_NBR_3.alias('USER_NBR_3'),
    DATA_IN.ROLE_3.alias('ROLE_3'),
    DATA_IN.USER_NBR_4.alias('USER_NBR_4'),
    DATA_IN.ROLE_4.alias('ROLE_4'),
    DATA_IN.USER_NBR_5.alias('USER_NBR_5'),
    DATA_IN.ROLE_5.alias('ROLE_5'),
    DATA_IN.USER_NBR_6.alias('USER_NBR_6'),
    DATA_IN.ROLE_6.alias('ROLE_6'),
    DATA_IN.SWING_APPLICABLE.alias('SWING_APPLICABLE'),
    DATA_IN.SWING_MANAGED_BY.alias('SWING_MANAGED_BY'),
    DATA_IN.SWING_OWNER.alias('SWING_OWNER'),
    DATA_IN.PREMIUM_DISC_INDICATOR.alias('PREMIUM_DISC_INDICATOR'),
    DATA_IN.NOTICE_DELI_MODE_1.alias('NOTICE_DELI_MODE_1'),
    DATA_IN.NOTICE_DELI_MODE_2.alias('NOTICE_DELI_MODE_2'),
    DATA_IN.NOTICE_DELI_MODE_3.alias('NOTICE_DELI_MODE_3'),
    DATA_IN.NOTICE_DELI_MODE_4.alias('NOTICE_DELI_MODE_4'),
    DATA_IN.NOTICE_DELI_MODE_5.alias('NOTICE_DELI_MODE_5'),
    DATA_IN.NOTICE_DELI_MODE_6.alias('NOTICE_DELI_MODE_6'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node aud_out_CONV8, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_PROD_LINK_aud, link aud_out_CONV8

aud_out_CONV8 = aud_in_CONV8.select(
    aud_in_CONV8.TOTAL,
    aud_in_CONV8.NULL,
    aud_in_CONV8.RECORD_COUNT,
    aud_in_CONV8.COUNT
)

# Processing node ARRANGEMENT_MEMBER_MIRROR_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_MEMBER_MIRROR_aud = aud_out_CONV5.select('*')
ARRANGEMENT_MEMBER_MIRROR_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_mirror_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node DATA_IN_CONV5, type SOURCE
# COLUMN COUNT: 26
# Original node name Ora_ARRANGEMENT_MEMBER_MIRROR, link DATA_IN_CONV5

DATA_IN_CONV5 = """SELECT
INST_NBR,
MIRROR_NBR,
COUNTER_PARTY_NBR,
CUST_NBR,
ARRANGEMENT_NBR,
ARRANGEMENT_PROD_CODE,
EFF_DT,
SHARE_AMOUNT,
SHARE_PERC,
SHARE_UTILIZED,
ASSET_SHARE_PRIORITY,
PREMIUM_DISC_INDICATOR,
PREMIUM_DISC_AMOUNT,
PRIN_RECEIVABLE,
INTEREST_RECEIVABLE,
COMMITMENT_INTEREST_RECEIVABLE,
DEFAULT_INTEREST_RECEIVABLE,
FEE_RECEIVABLE,
PRIN_PAYABLE,
INTEREST_PAYABLE,
COMMITMENT_INTEREST_PAYABLE,
DEFAULT_INTEREST_PAYABLE,
FEE_PAYABLE,
LATE_FEE_PAY,
SYSTEM,
BRL_RECORD_DT
FROM
"+ps_BANCS_BRL+".ARRANGEMENT_MEMBER_MIRROR
WHERE
BRL_RECORD_DT=TO_DATE("+ps_BANCS_BRL+",'yyyymmdd')"""

DATA_IN_CONV5 = spark.sql(DATA_IN_CONV5)

# Processing node SEQ_ARRANGEMENT_MEMBER_PROD_LINK, type TARGET
# COLUMN COUNT: 11

SEQ_ARRANGEMENT_MEMBER_PROD_LINK = LINK_OUT_CONV6.select('*')
SEQ_ARRANGEMENT_MEMBER_PROD_LINK.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_prod_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node LINK_OUT_CONV4, type TRANSFORMATION
# COLUMN COUNT: 26
# Original node name XFM_ARRANGEMENT_MEMBER_MIRROR, link LINK_OUT_CONV4

LINK_OUT_CONV4 = DATA_IN_CONV5.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.MIRROR_NBR.alias('MIRROR_NBR'),
    DATA_IN.COUNTER_PARTY_NBR.alias('COUNTER_PARTY_NBR'),
    DATA_IN.CUST_NBR.alias('CUST_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.ARRANGEMENT_PROD_CODE.alias('ARRANGEMENT_PROD_CODE'),
    DATA_IN.EFF_DT.alias('EFF_DT'),
    DATA_IN.SHARE_AMOUNT.alias('SHARE_AMOUNT'),
    DATA_IN.SHARE_PERC.alias('SHARE_PERC'),
    DATA_IN.SHARE_UTILIZED.alias('SHARE_UTILIZED'),
    DATA_IN.ASSET_SHARE_PRIORITY.alias('ASSET_SHARE_PRIORITY'),
    DATA_IN.PREMIUM_DISC_INDICATOR.alias('PREMIUM_DISC_INDICATOR'),
    DATA_IN.PREMIUM_DISC_AMOUNT.alias('PREMIUM_DISC_AMOUNT'),
    DATA_IN.PRIN_RECEIVABLE.alias('PRIN_RECEIVABLE'),
    DATA_IN.INTEREST_RECEIVABLE.alias('INTEREST_RECEIVABLE'),
    DATA_IN.COMMITMENT_INTEREST_RECEIVABLE.alias(
        'COMMITMENT_INTEREST_RECEIVABLE'),
    DATA_IN.DEFAULT_INTEREST_RECEIVABLE.alias('DEFAULT_INTEREST_RECEIVABLE'),
    DATA_IN.FEE_RECEIVABLE.alias('FEE_RECEIVABLE'),
    DATA_IN.PRIN_PAYABLE.alias('PRIN_PAYABLE'),
    DATA_IN.INTEREST_PAYABLE.alias('INTEREST_PAYABLE'),
    DATA_IN.COMMITMENT_INTEREST_PAYABLE.alias('COMMITMENT_INTEREST_PAYABLE'),
    DATA_IN.DEFAULT_INTEREST_PAYABLE.alias('DEFAULT_INTEREST_PAYABLE'),
    DATA_IN.FEE_PAYABLE.alias('FEE_PAYABLE'),
    DATA_IN.LATE_FEE_PAY.alias('LATE_FEE_PAY'),
    DATA_IN.SYSTEM.alias('SYSTEM'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node LINK_OUT_CONV7, type TRANSFORMATION
# COLUMN COUNT: 5
# Original node name XFM_ARRANGEMENT_PROD_LINK, link LINK_OUT_CONV7

LINK_OUT_CONV7 = DATA_IN_CONV8.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.ARRANGEMENT_PROD_CODE.alias('ARRANGEMENT_PROD_CODE'),
    DATA_IN.SWING_LIMIT.alias('SWING_LIMIT'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node LINK_OUT, type TRANSFORMATION
# COLUMN COUNT: 16
# Original node name XFM_ACCT_ADDRESS_LINK, link LINK_OUT

LINK_OUT = DATA_IN_CONV2.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ACCT_NBR.alias('ACCT_NBR'),
    DATA_IN.CUST_NBR.alias('CUST_NBR'),
    DATA_IN.SEQ_NBR.alias('SEQ_NBR'),
    DATA_IN.LINK_TYPE.alias('LINK_TYPE'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT'),
    DATA_IN.ADDRESS_TYPE.alias('ADDRESS_TYP'),
    DATA_IN.COMMUNICATION_TYPE.alias('COMMUNICATION_TYPE'),
    DATA_IN.COMMUNICATION_MODE.alias('COMMUNICATION_MODE'),
    DATA_IN.NBR_OF_COPIES.alias('NBR_OF_COPIES'),
    DATA_IN.EFF_DT.alias('EFF_DT'),
    DATA_IN.EXPIRY_DT.alias('EXPIRY_DT'),
    (lit(None).cast(NullType())).alias('TCPA_OPT_IN'),
    (lit(None).cast(NullType())).alias('TCPA_OPT_DT'),
    DATA_IN.FOREIGN_ADDRESS_INDICATOR.alias('FOREIGN_ADDRESS_INDICATOR'),
    DATA_IN.BAD_ADDRESS_INDICATOR.alias('BAD_ADDRESS_INDICATOR')
)

# Processing node LINK_OUT_CONV9, type TRANSFORMATION
# COLUMN COUNT: 21
# Original node name XFM_BUDGET_LINE_ITEM_MASTER, link LINK_OUT_CONV9

LINK_OUT_CONV9 = DATA_IN_CONV10.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ACCT_NBR.alias('ACCT_NBR'),
    DATA_IN.BUDGET_NBR.alias('BUDGET_NBR'),
    DATA_IN.LINE_ITEM_NBR.alias('LINE_ITEM_NBR'),
    DATA_IN.LINE_ITEM_SEQ_NBR.alias('LINE_ITEM_SEQ_NBR'),
    DATA_IN.MASTER_ACCT_NBR.alias('MASTER_ACCT_NBR'),
    DATA_IN.LINE_ITEM_DESC.alias('LINE_ITEM_DESC'),
    DATA_IN.LINE_ITEM_CATEGORY.alias('LINE_ITEM_CATEGORY'),
    DATA_IN.LINE_ITEM_SUB_CATEGORY.alias('LINE_ITEM_SUB_CATEGORY'),
    DATA_IN.BUDGET_AMOUNT.alias('BUDGET_AMOUNT'),
    DATA_IN.REVISED_BUDGET_AMOUNT.alias('REVISED_BUDGET_AMOUNT'),
    DATA_IN.UTILIZED_AMOUNT.alias('UTILIZED_AMOUNT'),
    DATA_IN.PENDING_DRAW_AMOUNT.alias('PENDING_DRAW_AMOUNT'),
    DATA_IN.RETENTION_AMOUNT.alias('RETENTION_AMOUNT'),
    DATA_IN.INSPECTION_FLAG.alias('INSPECTION_FLAG'),
    DATA_IN.INSPECTION_PERC_COMPLETE.alias('INSPECTION_PERC_COMPLETE'),
    DATA_IN.INSPECTION_AMOUNT_COMPLETE.alias('INSPECTION_AMOUNT_COMPLETE'),
    DATA_IN.RETENTION_FLAG.alias('RETENTION_FLAG'),
    DATA_IN.HOLD_FLAG.alias('HOLD_FLAG'),
    DATA_IN.BUDGET_LINE_STATUS.alias('BUDGET_LINE_STATUS'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node SEQ_ACCT_ADDRESS_LINK, type TARGET
# COLUMN COUNT: 16

SEQ_ACCT_ADDRESS_LINK = LINK_OUT.select('*')
SEQ_ACCT_ADDRESS_LINK.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_acct_address_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node SEQ_BUDGET_LINE_ITEM_MASTER, type TARGET
# COLUMN COUNT: 21

SEQ_BUDGET_LINE_ITEM_MASTER = LINK_OUT_CONV9.select('*')
SEQ_BUDGET_LINE_ITEM_MASTER.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_budget_line_item_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node LINK_OUT_CONV3, type TRANSFORMATION
# COLUMN COUNT: 6
# Original node name XFM_ARRANGEMENT_LINK_ENQUIRY, link LINK_OUT_CONV3

LINK_OUT_CONV3 = DATA_IN_CONV4.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.FACILITY_NBR.alias('FACILITY_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.STATUS.alias('STATUS'),
    DATA_IN.ARRANGEMENT_INDICATOR.alias('ARRANGEMENT_INDICATOR'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node aud_out_CONV6, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_MEMBER_LINK, link aud_out_CONV6

aud_out_CONV6 = aud_in_CONV6.select(
    aud_in_CONV6.TOTAL,
    aud_in_CONV6.NULL,
    aud_in_CONV6.RECORD_COUNT,
    aud_in_CONV6.COUNT
)

# Processing node LINK_OUT_CONV8, type TRANSFORMATION
# COLUMN COUNT: 45
# Original node name XFM_ARRANGEMENT_SETUP_MASTER, link LINK_OUT_CONV8

LINK_OUT_CONV8 = DATA_IN_CONV9.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ARRANGEMENT_NBR.alias('ARRANGEMENT_NBR'),
    DATA_IN.CUST_NBR.alias('CUST_NBR'),
    DATA_IN.EFF_DT.alias('EFF_DT'),
    DATA_IN.TOTAL_LIMIT_AMOUNT.alias('TOTAL_LIMIT_AMOUNT'),
    DATA_IN.ARRANGEMENT_ROLE.alias('ARRANGEMENT_ROLE'),
    DATA_IN.ARRANGEMENT_TYPE.alias('ARRANGEMENT_TYPE'),
    DATA_IN.ARRANGEMENT_STATUS.alias('ARRANGEMENT_STATUS'),
    DATA_IN.ARRANGEMENT_AUTH_STATUS.alias('ARRANGEMENT_AUTH_STATUS'),
    DATA_IN.ARRANGEMENT_UTILIZED_AMOUNT.alias('ARRANGEMENT_UTILIZED_AMOUNT'),
    DATA_IN.PARENT_ARRANGEMENT_NBR.alias('PARENT_ARRANGEMENT_NBR'),
    DATA_IN.BRANCH_NBR.alias('BRANCH_NBR'),
    DATA_IN.RECOURSE_FLAG.alias('RECOURSE_FLAG'),
    DATA_IN.ASSET_SHARE.alias('ASSET_SHARE'),
    DATA_IN.AGREEMENT_START_DT.alias('AGREEMENT_START_DT'),
    DATA_IN.AGREEMENT_EXPIRY_DT.alias('AGREEMENT_EXPIRY_DT'),
    DATA_IN.REF_BANK.alias('REF_BANK'),
    DATA_IN.CUSIP_NBR.alias('CUSIP_NBR'),
    DATA_IN.SHARE_CREDIT_FLAG.alias('SHARE_CREDIT_FLAG'),
    DATA_IN.SHARE_CREDIT_ID.alias('SHARE_CREDIT_ID'),
    DATA_IN.SHARE_AMOUNT.alias('SHARE_AMOUNT'),
    DATA_IN.SHARE_PERC.alias('SHARE_PERC'),
    DATA_IN.ARRANGEMENT_USER_NBR_1.alias('ARRANGEMENT_USER_NBR_1'),
    DATA_IN.ARRANGEMENT_ROLE_1.alias('ARRANGEMENT_ROLE_1'),
    DATA_IN.ARRANGEMENT_USER_NBR_2.alias('ARRANGEMENT_USER_NBR_2'),
    DATA_IN.ARRANGEMENT_ROLE_2.alias('ARRANGEMENT_ROLE_2'),
    DATA_IN.ARRANGEMENT_USER_NBR_3.alias('ARRANGEMENT_USER_NBR_3'),
    DATA_IN.ARRANGEMENT_ROLE_3.alias('ARRANGEMENT_ROLE_3'),
    DATA_IN.ARRANGEMENT_USER_NBR_4.alias('ARRANGEMENT_USER_NBR_4'),
    DATA_IN.ARRANGEMENT_ROLE_4.alias('ARRANGEMENT_ROLE_4'),
    DATA_IN.ARRANGEMENT_USER_NBR_5.alias('ARRANGEMENT_USER_NBR_5'),
    DATA_IN.ARRANGEMENT_ROLE_5.alias('ARRANGEMENT_ROLE_5'),
    DATA_IN.ARRANGEMENT_USER_NBR_6.alias('ARRANGEMENT_USER_NBR_6'),
    DATA_IN.ARRANGEMENT_ROLE_6.alias('ARRANGEMENT_ROLE_6'),
    DATA_IN.SWING_APPLICABLE.alias('SWING_APPLICABLE'),
    DATA_IN.SWING_MANAGED_BY.alias('SWING_MANAGED_BY'),
    DATA_IN.SWING_OWNER.alias('SWING_OWNER'),
    DATA_IN.GLOBAL_UTILIZED_LIMIT_BASIS.alias('GLOBAL_UTILIZED_LIMIT_BASIS'),
    DATA_IN.USED_NOTE_VALUE.alias('USED_NOTE_VALUE'),
    DATA_IN.ORIGINAL_LIMIT_AMOUNT.alias('ORIGINAL_LIMIT_AMOUNT'),
    DATA_IN.SUB_LIMIT_AMOUNT.alias('SUB_LIMIT_AMOUNT'),
    DATA_IN.ARRANGEMENT_DESC.alias('ARRANGEMENT_DESC'),
    DATA_IN.ULT_AGENT.alias('ULT_AGENT'),
    DATA_IN.ARRANGEMENT_AGENT_BANK.alias('ARRANGEMENT_AGENT_BANK'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node SEQ_ARRANGEMENT_SETUP_MASTER, type TARGET
# COLUMN COUNT: 45

SEQ_ARRANGEMENT_SETUP_MASTER = LINK_OUT_CONV8.select('*')
SEQ_ARRANGEMENT_SETUP_MASTER.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_setup_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node aud_out_CONV4, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_LINK_ENQUIRY_aud, link aud_out_CONV4

aud_out_CONV4 = aud_in_CONV4.select(
    aud_in_CONV4.TOTAL,
    aud_in_CONV4.NULL,
    aud_in_CONV4.RECORD_COUNT,
    aud_in_CONV4.COUNT
)

# Processing node aud_out_CONV3, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_ACCT_LINK_aud, link aud_out_CONV3

aud_out_CONV3 = aud_in_CONV3.select(
    aud_in_CONV3.TOTAL,
    aud_in_CONV3.NULL,
    aud_in_CONV3.RECORD_COUNT,
    aud_in_CONV3.COUNT
)

# Processing node SEQ_ARRANGEMENT_MEMBER_LINK, type TARGET
# COLUMN COUNT: 35

SEQ_ARRANGEMENT_MEMBER_LINK = LINK_OUT_CONV5.select('*')
SEQ_ARRANGEMENT_MEMBER_LINK.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node aud_out_CONV10, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_ARRANGEMENT_SETUP_MASTER, link aud_out_CONV10

aud_out_CONV10 = aud_in_CONV10.select(
    aud_in_CONV10.TOTAL,
    aud_in_CONV10.NULL,
    aud_in_CONV10.RECORD_COUNT,
    aud_in_CONV10.COUNT
)

# Processing node SEQ_ARRANGEMENT_MEMBER_MIRROR, type TARGET
# COLUMN COUNT: 26

SEQ_ARRANGEMENT_MEMBER_MIRROR = LINK_OUT_CONV4.select('*')
SEQ_ARRANGEMENT_MEMBER_MIRROR.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_mirror_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node aud_out, type REPLICATE
# COLUMN COUNT: 4
# Original node name Copy_aud, link aud_out

aud_out = aud_in.select(
    aud_in.TOTAL,
    aud_in.NULL,
    aud_in.RECORD_COUNT,
    aud_in.COUNT
)

# Processing node LINK_OUT_CONV10, type TRANSFORMATION
# COLUMN COUNT: 28
# Original node name XFM_BUDGET_SUMMARY_MASTER, link LINK_OUT_CONV10

LINK_OUT_CONV10 = DATA_IN_CONV11.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ACCT_NBR.alias('ACCT_NBR'),
    DATA_IN.BUDGET_NBR.alias('BUDGET_NBR'),
    DATA_IN.MASTER_ACCT_NBR.alias('MASTER_ACCT_NBR'),
    DATA_IN.BUDGET_STATUS.alias('BUDGET_STATUS'),
    DATA_IN.LOAN_FUND_AMOUNT.alias('LOAN_FUND_AMOUNT'),
    DATA_IN.LOAN_FUND_UTILIZED_AMOUNT.alias('LOAN_FUND_UTILIZED_AMOUNT'),
    DATA_IN.LOAN_FUND_PENDING_DRAW_AMOUNT.alias(
        'LOAN_FUND_PENDING_DRAW_AMOUNT'),
    DATA_IN.LOAN_FUND_RETENTION_AMOUNT.alias('LOAN_FUND_RETENTION_AMOUNT'),
    DATA_IN.LOAN_FUND_EXCESS_AMOUNT.alias('LOAN_FUND_EXCESS_AMOUNT'),
    DATA_IN.OTHER_SOURCE_AMOUNT.alias('OTHER_SOURCE_AMOUNT'),
    DATA_IN.OTHER_SOURCE_UTILIZED_AMOUNT.alias('OTHER_SOURCE_UTILIZED_AMOUNT'),
    DATA_IN.OTHER_SOURCE_PENDING_AMOUNT.alias('OTHER_SOURCE_PENDING_AMOUNT'),
    DATA_IN.HOLD_AMOUNT.alias('HOLD_AMOUNT'),
    DATA_IN.INSPECTION_METHOD.alias('INSPECTION_METHOD'),
    DATA_IN.INSPECTION_BASIS.alias('INSPECTION_BASIS'),
    DATA_IN.INSPECTION_PERC_COMPLETE.alias('INSPECTION_PERC_COMPLETE'),
    DATA_IN.INSPECTION_AMOUNT_COMPLETE.alias('INSPECTION_AMOUNT_COMPLETE'),
    DATA_IN.LAST_INSPECTION_DT.alias('LAST_INSPECTION_DT'),
    DATA_IN.PRIMARY_VENDOR_ID.alias('PRIMARY_VENDOR_ID'),
    DATA_IN.PRIMARY_VENDOR_NAME.alias('PRIMARY_VENDOR_NAME'),
    DATA_IN.PROJECT_END_DT.alias('PROJECT_END_DT'),
    DATA_IN.FIRST_ACTIVE_DT.alias('FIRST_ACTIVE_DT'),
    DATA_IN.PRIMARY_SUB_VENDOR_ID.alias('PRIMARY_SUB_VENDOR_ID'),
    DATA_IN.ORIGINAL_LOAN_FUND_AMOUNT.alias('ORIGINAL_LOAN_FUND_AMOUNT'),
    DATA_IN.ORIGINAL_OTHER_SOURCE_AMOUNT.alias('ORIGINAL_OTHER_SOURCE_AMOUNT'),
    DATA_IN.ORIGINAL_EXCEED_FUND_AMOUNT.alias('ORIGINAL_EXCEED_FUND_AMOUNT'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node LINK_OUT_CONV11, type TRANSFORMATION
# COLUMN COUNT: 9
# Original node name XFM_ACCT_FACILITY_REL_DTLS, link LINK_OUT_CONV11

LINK_OUT_CONV11 = DATA_IN.select(
    DATA_IN.INST_NBR.alias('INST_NBR'),
    DATA_IN.ACCT_NBR.alias('ACCT_NBR'),
    DATA_IN.FACILITY_NBR.alias('FACILITY_NBR'),
    DATA_IN.FACILITY_LVL_NBR.alias('FACILITY_LVL_NBR'),
    DATA_IN.FACILITY_PARENT_REF.alias('FACILITY_PARENT_REF'),
    DATA_IN.FACILITY_BREAKDOWN.alias('FACILITY_BREAKDOWN'),
    DATA_IN.FACILITY_REPAY_TYPE.alias('FACILITY_REPAY_TYPE'),
    DATA_IN.FACILITY_REPAY_PRIORITY.alias('FACILITY_REPAY_PRIORITY'),
    DATA_IN.BRL_RECORD_DT.alias('BRL_RECORD_DT')
)

# Processing node SEQ_ACCT_FACILITY_REL_DTLS, type TARGET
# COLUMN COUNT: 9

SEQ_ACCT_FACILITY_REL_DTLS = LINK_OUT_CONV11.select('*')
SEQ_ACCT_FACILITY_REL_DTLS.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_acct_facility_rel_dtls_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node ACCT_ADDRESS_LINK_aud, type TARGET
# COLUMN COUNT: 4

ACCT_ADDRESS_LINK_aud = aud_out_CONV2.select('*')
ACCT_ADDRESS_LINK_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_acct_address_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node ARRANGEMENT_MEMBER_LINK_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_MEMBER_LINK_aud = aud_out_CONV6.select('*')
ARRANGEMENT_MEMBER_LINK_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node ARRANGEMENT_LINK_ENQUIRY_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_LINK_ENQUIRY_aud = aud_out_CONV4.select('*')
ARRANGEMENT_LINK_ENQUIRY_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_link_enquiry_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node SEQ_ARRANGEMENT_ACCT_LINK, type TARGET
# COLUMN COUNT: 14

SEQ_ARRANGEMENT_ACCT_LINK = LINK_OUT_CONV2.select('*')
SEQ_ARRANGEMENT_ACCT_LINK.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_acct_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node ARRANGEMENT_PROD_LINK_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_PROD_LINK_aud = aud_out_CONV8.select('*')
ARRANGEMENT_PROD_LINK_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_prod_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node SEQ_ARRANGEMENT_LINK_ENQUIRY, type TARGET
# COLUMN COUNT: 6

SEQ_ARRANGEMENT_LINK_ENQUIRY = LINK_OUT_CONV3.select('*')
SEQ_ARRANGEMENT_LINK_ENQUIRY.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_link_enquiry_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node SEQ_ARRANGEMENT_PROD_LINK, type TARGET
# COLUMN COUNT: 5

SEQ_ARRANGEMENT_PROD_LINK = LINK_OUT_CONV7.select('*')
SEQ_ARRANGEMENT_PROD_LINK.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_prod_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node ARRANGEMENT_MEMBER_PROD_LINK_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_MEMBER_PROD_LINK_aud = aud_out_CONV7.select('*')
ARRANGEMENT_MEMBER_PROD_LINK_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_member_prod_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node ARRANGEMENT_ACCT_LINK_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_ACCT_LINK_aud = aud_out_CONV3.select('*')
ARRANGEMENT_ACCT_LINK_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_acct_link_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node SEQ_BUDGET_SUMMARY_MASTER, type TARGET
# COLUMN COUNT: 28

SEQ_BUDGET_SUMMARY_MASTER = LINK_OUT_CONV10.select('*')
SEQ_BUDGET_SUMMARY_MASTER.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_budget_summary_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.src')

# Processing node ACCT_FACILITY_REL_DTLS_aud, type TARGET
# COLUMN COUNT: 4

ACCT_FACILITY_REL_DTLS_aud = aud_out.select('*')
ACCT_FACILITY_REL_DTLS_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_acct_facility_rel_dtls_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')

# Processing node ARRANGEMENT_SETUP_MASTER_aud, type TARGET
# COLUMN COUNT: 4

ARRANGEMENT_SETUP_MASTER_aud = aud_out_CONV10.select('*')
ARRANGEMENT_SETUP_MASTER_aud.write.format('csv').option('header', 'false').mode('overwrite').option('sep', ',').csv('#ps_BANCS_BRL.SOURCE_DIR#/#ps_BANCS_BRL.CDH_USECASE#/#ps_BANCS_BRL.CDH_USECASE{getArgument('_arrangement_setup_master_')}ps_BANCS_BRL.BANK_NUM{getArgument('_')}ps_BANCS_BRL.DATA_DATE#.aud')
